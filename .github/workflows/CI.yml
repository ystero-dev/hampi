name: build on pull request

on:
  push:
    branches: [ master ]
    paths:
      - 'asn-compiler/**'
      - 'codecs/**'
      - 'codecs_derive/**'
      - '!codecs/specs/**'
      - 'examples/**'
      - '!examples/specs/**'
      - '!README*'
      - '!LICENSE*'
      - '!.gitignore'
  pull_request:
    branches: [ master ]
    paths:
      - 'asn-compiler/**'
      - 'codecs/**'
      - 'codecs_derive/**'
      - '!codecs/specs/**'
      - 'examples/**'
      - '!examples/specs/**'
      - '!README*'
      - '!LICENSE*'
      - '!.gitignore'
      - '!**/Cargo.toml'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    name: (${{ matrix.target}}, ${{ matrix.cfg_release_channel }})
    strategy:
      matrix:
        target: [
          x86_64-unknown-linux-gnu,
        ]
        cfg_release_channel: [ nightly, stable]

    steps:
    - uses: actions/checkout@v3
    - name: install rustup
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > rustup-init.sh
        sh rustup-init.sh -y --default-toolchain none
        rustup target add ${{ matrix.target }}
        rustup default ${{ matrix.cfg_release_channel }}
    - name: Set up cargo cache
      uses: Swatinem/rust-cache@v2
    - name: Build
      run: |
        rustc -Vv
        cargo -V
        cargo build --verbose --release
    - name: Run tests
      run: |
        rustc -Vv
        cargo -V
        cargo test --verbose --release
